{"version":3,"sources":["components/ExpenseItem.js","components/ExpenseList.js","components/ExpenseForm.js","components/Alert.js","App.js","serviceWorker.js","index.js"],"names":["ExpenseItem","expense","handleEdit","handleDelete","id","charge","amount","className","aria-label","onClick","ExpenseList","expenses","clearItems","map","key","length","ExpenseForm","handleCharge","handleAmount","handleSubmit","edit","onSubmit","htmlFor","type","name","placeholder","value","onChange","Alert","text","initialExpenses","localStorage","getItem","JSON","parse","App","useState","setExpenses","setCharge","setAmount","show","alert","setAlert","setEdit","setId","useEffect","console","log","setItem","stringify","handleAlert","setTimeout","e","preventDefault","tempExpenses","item","singleExpense","uuid","target","filter","find","reduce","acc","curr","parseInt","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.46638723.chunk.js","sourcesContent":["import React from 'react'\r\nimport {MdEdit, MdDelete} from 'react-icons/md'\r\n\r\nconst ExpenseItem = ({expense, handleEdit, handleDelete}) => {\r\n    const{id, charge, amount} = expense\r\n    return (\r\n    <li className =\"item\">\r\n        <div className = \"info\">\r\n            <span className = \"expense\">{charge}</span>\r\n            <span className = \"amount\" > ${amount}</span>\r\n            </div>\r\n        <div>\r\n            <button className=\"edit-btn\" aria-label =\" edit button\" onClick = {()=>handleEdit(id)}>\r\n            <MdEdit />\r\n            </button>\r\n            <button className=\"clear-btn\" aria-label =\" delete button\" onClick = {()=> handleDelete(id)}>\r\n            <MdDelete />\r\n            </button>\r\n        </div>\r\n    </li>\r\n    );\r\n};\r\n\r\nexport default ExpenseItem;","import React from \"react\";\r\nimport {MdDelete} from 'react-icons/md'\r\nimport ExpenseItem from \"./ExpenseItem\";\r\n\r\nconst ExpenseList = ({ expenses, handleEdit, handleDelete, clearItems }) => {\r\n  return (\r\n    <>\r\n      <ul className=\"list\">\r\n        {expenses.map((expense) => {\r\n          return (\r\n            <ExpenseItem\r\n              key={expense.id}\r\n              expense={expense}\r\n              handleDelete={handleDelete}\r\n              handleEdit={handleEdit}\r\n            />\r\n          );\r\n        })}\r\n      </ul>\r\n      {expenses.length > 0 && (\r\n      <button className = \"btn\" onClick={clearItems}> \r\n      Clear Expenses\r\n      <MdDelete className=\"btn-icon\"/>\r\n      </button>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ExpenseList;\r\n","import React from 'react';\r\nimport {MdSend} from \"react-icons/md\";\r\n\r\nconst ExpenseForm = ({charge,amount,handleCharge,handleAmount, handleSubmit,edit}) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n          <div className=\"form-center\">\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"expense\">charge</label>\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                id=\"charge\"\r\n                name=\"charge\"\r\n                placeholder=\"e.g. rent\"\r\n                value={charge}\r\n                onChange={handleCharge}\r\n\r\n              />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"amount\">amount</label>\r\n              <input\r\n                type=\"number\"\r\n                className=\"form-control\"\r\n                id=\"amount\"\r\n                name=\"amount\"\r\n                placeholder=\"e.g. 100\"\r\n                value={amount}\r\n                onChange={handleAmount}\r\n              />\r\n            </div>\r\n          </div>\r\n        <button type=\"submit\" className=\"btn\">\r\n            {edit? \"edit\" : \"submit\"}\r\n            <MdSend className =\"btn-icon\"/>\r\n        </button>\r\n    </form>\r\n    );\r\n};\r\n\r\nexport default ExpenseForm;","import React from 'react'\r\n\r\nconst Alert = ({type,text}) => {\r\n    return <div className={`alert alert-${type}`}>{text} </div>;\r\n};\r\n\r\nexport default Alert;","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport ExpenseList from \"./components/ExpenseList\";\nimport ExpenseForm from \"./components/ExpenseForm\";\nimport Alert from \"./components/Alert\";\nimport uuid from \"uuid/v4\";\n\n// const initialExpenses = [\n//   {id: uuid(),charge: \"rent\", amount: 1600},\n//   {id: uuid(),charge: \"car payment\", amount: 400},\n//   {id: uuid(),charge: \"credit card bill\", amount: 1200}\n\n// ];\n//useEffect hook\n\n//hook\nconst initialExpenses = localStorage.getItem(\"expenses\")\n  ? JSON.parse(localStorage.getItem(\"expenses\"))\n  : [];\n\nfunction App() {\n  //state values\n  //all expenses, add expenses\n  const [expenses, setExpenses] = useState(initialExpenses);\n  //single expense\n  const [charge, setCharge] = useState(\"\");\n  //single amount\n  const [amount, setAmount] = useState(\"\");\n  //alert\n  const [alert, setAlert] = useState({ show: false });\n\n  //edit\n  const [edit, setEdit] = useState(false);\n  //edit item\n  const [id, setId] = useState(0);\n\n  //useEffect\n  useEffect(() => {\n    console.log(\"we call useEffect\");\n    localStorage.setItem(\"expenses\", JSON.stringify(expenses));\n  }, [expenses]);\n\n  //functionality\n  //handle charge\n  const handleCharge = (e) => {\n    setCharge(e.target.value);\n  };\n  //handle amount\n  const handleAmount = (e) => {\n    setAmount(e.target.value);\n  };\n\n  //handle alert\n  const handleAlert = ({ type, text }) => {\n    setAlert({ show: true, type, text });\n    setTimeout(() => {\n      setAlert({ show: false });\n    }, 3000);\n  };\n\n  //hanlde submit\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (charge !== \"\" && amount > 0) {\n      if (edit) {\n        let tempExpenses = expenses.map((item) => {\n          return item.id === id ? { ...item, charge, amount } : item;\n        });\n\n        setExpenses(tempExpenses);\n        setEdit(false);\n        handleAlert({ type: \"success\", text: \"item edited\" });\n      } else {\n        const singleExpense = { id: uuid(), charge, amount };\n        setExpenses([...expenses, singleExpense]);\n        handleAlert({ type: \"success\", text: \"item added\" });\n      }\n\n      setCharge(\"\");\n      setAmount(\"\");\n    } else {\n      //handle alert called\n      handleAlert({\n        type: \"danger\",\n        text: `charge can't be empty value, value has tyo be > 0 `,\n      });\n    }\n  };\n\n  //clear all items\n  const clearItems = () => {\n    setExpenses([]);\n    handleAlert({ type: \"danger\", text: \"All items deleted\" });\n\n    console.log(\"clear all items\");\n  };\n\n  //handle delete\n  const handleDelete = (id) => {\n    let tempExpenses = expenses.filter((item) => item.id !== id);\n    setExpenses(tempExpenses);\n    handleAlert({ type: \"danger\", text: \"item deleted\" });\n  };\n  //handle edit\n  const handleEdit = (id) => {\n    let expense = expenses.find((item) => item.id === id);\n    let { charge, amount } = expense;\n    setCharge(charge);\n    setAmount(amount);\n    setEdit(true);\n    setId(id);\n  };\n\n  return (\n    <>\n      {alert.show && <Alert type={alert.type} text={alert.text} />}\n      <h1>budget calclulator</h1>\n      <main className=\"App\">\n        <ExpenseForm\n          handleSubmit={handleSubmit}\n          charge={charge}\n          amount={amount}\n          handleAmount={handleAmount}\n          handleCharge={handleCharge}\n          edit={edit}\n        />\n        <ExpenseList\n          expenses={expenses}\n          handleDelete={handleDelete}\n          handleEdit={handleEdit}\n          clearItems={clearItems}\n        />\n      </main>\n      <h1>\n        total spending:{\" \"}\n        <span className=\"total\">\n          $\n          {expenses.reduce((acc, curr) => {\n            return (acc += parseInt(curr.amount));\n          }, 0)}\n        </span>\n      </h1>\n    </>\n  );\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}